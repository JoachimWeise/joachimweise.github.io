<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code on Joachim Weise</title>
    <link>https://joachimweise.github.io/tags/code/</link>
    <description>Recent content in code on Joachim Weise</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>youremail@domain.com (Joachim Weise)</managingEditor>
    <webMaster>youremail@domain.com (Joachim Weise)</webMaster>
    <lastBuildDate>Sun, 17 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://joachimweise.github.io/tags/code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Arduino Motor Control Using Serial Connection</title>
      <link>https://joachimweise.github.io/post/2020-05-17-serial-connection/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (Joachim Weise)</author>
      <guid>https://joachimweise.github.io/post/2020-05-17-serial-connection/</guid>
      <description>&lt;p&gt;In my &lt;a href=&#34;https://joachimweise.github.io/page/robot/&#34;&gt;evolving robot car project&lt;/a&gt; it is now time to go for a test drive. More precisely, I would like to establish bidirectional communication between the Raspberry Pi, acting as &lt;em&gt;spiritus rector&lt;/em&gt;, and the Arduino, translating abstract intention into concrete motor control with the Adafruit Motor Shield.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;


&lt;div class=&#34;box fancy-figure caption-position-bottom caption-effect-fade&#34; style=&#34;max-width:600px&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;https://joachimweise.github.io/img/2020-05-17-serial-connection/robot.gif&#34; alt=&#34;Bot in action&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;https://joachimweise.github.io/img/2020-05-17-serial-connection/robot.gif&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;
          &lt;p&gt;Bot in action&lt;/p&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;/center&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Ultrasonic Range Sensor on the Raspberry Pi</title>
      <link>https://joachimweise.github.io/post/2019-12-25-ultrasonic-sensor-raspi/</link>
      <pubDate>Sat, 28 Dec 2019 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (Joachim Weise)</author>
      <guid>https://joachimweise.github.io/post/2019-12-25-ultrasonic-sensor-raspi/</guid>
      <description>&lt;p&gt;In this project I am interfacing the HC-SR04 ultrasonic sensor module to a Raspberry Pi to measure distance. Later on the Raspberry as well as the sensor will be part of an obstacle avoiding robot. I use my oscilloscope to check whether the sensor is working as announced.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python virtual environments</title>
      <link>https://joachimweise.github.io/post/2019-11-16-python-environments/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (Joachim Weise)</author>
      <guid>https://joachimweise.github.io/post/2019-11-16-python-environments/</guid>
      <description>&lt;p&gt;Anyone who works on Python projects and uses various packages will sooner or later have to deal with different versions of packages across different branches and projects. Because each project has its own set of dependencies, itâ€™s a good practice to avoid mixing them. If all the dependencies are installed together in a single Python environment, then it will be difficult to discern where each one came from. In the worst cases, two different projects may depend on two different versions of a package, but with Python you can only have one version of a package installed at one time. What a mess! Virtual environments address this issue. A virtual environment, put simply, is an isolated working copy of Python which allows you to work on a specific project without worry of affecting other projects.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Image Manipulation with Python Pillow</title>
      <link>https://joachimweise.github.io/post/2019-10-27-python-pillow/</link>
      <pubDate>Sun, 27 Oct 2019 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (Joachim Weise)</author>
      <guid>https://joachimweise.github.io/post/2019-10-27-python-pillow/</guid>
      <description>&lt;p&gt;Normally I use &lt;a href=&#34;https://www.gimp.org/&#34;&gt;GIMP&lt;/a&gt; when I need to resize, crop or retouch images in various ways. However, for my last &lt;a href=&#34;https://joachimweise.github.io/post/2019-10-19-first-post/&#34;&gt;post&lt;/a&gt; on the Berlin Festival of Light I would have had to manually resize and crop a whole bunch of images at a time. That&#39;s why I took a look how Python could help with this task, and found PIL, the Python Imaging Library, in newer versions known as &lt;a href=&#34;https://python-pillow.org/&#34;&gt;Pillow&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>First post!</title>
      <link>https://joachimweise.github.io/post/2019-10-19-first-post/</link>
      <pubDate>Sat, 19 Oct 2019 00:00:00 +0000</pubDate>
      <author>youremail@domain.com (Joachim Weise)</author>
      <guid>https://joachimweise.github.io/post/2019-10-19-first-post/</guid>
      <description>&lt;p&gt;Hello world, this is my first post!&lt;/p&gt;

&lt;p&gt;Like many others, I start with some remarks on how this blog is set up. I&#39;m using the static site generator &lt;code&gt;hugo&lt;/code&gt; and the theme &lt;code&gt;beautifulhugo&lt;/code&gt;. Since installation was straightforward, as described on the &lt;code&gt;hugo&lt;/code&gt; website, I will only list a few remarks, as a memory aid, on how I tweaked details of the layout.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>